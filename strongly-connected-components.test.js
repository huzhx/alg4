const Digraph = require('./digraph');
const SCC = require('./strongly-connected-components');

test('test stronglyConnected(v, w)', () => {
  const digraph = new Digraph(13);
  digraph.addEdge(0, 5);
  digraph.addEdge(0, 1);
  digraph.addEdge(2, 0);
  digraph.addEdge(2, 3);
  digraph.addEdge(3, 2);
  digraph.addEdge(3, 5);
  digraph.addEdge(4, 2);
  digraph.addEdge(4, 3);
  digraph.addEdge(5, 4);
  digraph.addEdge(6, 0);
  digraph.addEdge(6, 4);
  digraph.addEdge(6, 9);
  digraph.addEdge(7, 6);
  digraph.addEdge(7, 8);
  digraph.addEdge(8, 7);
  digraph.addEdge(8, 9);
  digraph.addEdge(9, 10);
  digraph.addEdge(9, 11);
  digraph.addEdge(10, 12);
  digraph.addEdge(11, 4);
  digraph.addEdge(11, 12);
  digraph.addEdge(12, 9);
  const scc = new SCC(digraph);
  const result = scc.stronglyConnected(1, 2);
  expect(result).toBeFalsy();
});

test('test count()', () => {
  const digraph = new Digraph(13);
  digraph.addEdge(0, 5);
  digraph.addEdge(0, 1);
  digraph.addEdge(2, 0);
  digraph.addEdge(2, 3);
  digraph.addEdge(3, 2);
  digraph.addEdge(3, 5);
  digraph.addEdge(4, 2);
  digraph.addEdge(4, 3);
  digraph.addEdge(5, 4);
  digraph.addEdge(6, 0);
  digraph.addEdge(6, 4);
  digraph.addEdge(6, 9);
  digraph.addEdge(7, 6);
  digraph.addEdge(7, 8);
  digraph.addEdge(8, 7);
  digraph.addEdge(8, 9);
  digraph.addEdge(9, 10);
  digraph.addEdge(9, 11);
  digraph.addEdge(10, 12);
  digraph.addEdge(11, 4);
  digraph.addEdge(11, 12);
  digraph.addEdge(12, 9);
  const scc = new SCC(digraph);
  const result = scc.count();
  const expected = 5;
  expect(result).toBe(expected);
});
